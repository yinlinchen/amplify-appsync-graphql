interface Object {
  id: ID!
  identifier: String!
  date: String
  description: String
  title: String!
  visibility: Boolean!
  parent_collection: [String!]
}

type Collection implements Object
  @model
  @searchable
  @key(
    name: "Identifier"
    fields: ["identifier"]
    queryField: "collectionByIdentifier"
  ) {
  collection_category: String!
  date: String
  description: String
  id: ID!
  identifier: String!
  parent_collection: [String!]
  title: String!
  visibility: Boolean!
  items: [Item] @connection(name: "CollectionItems")
}

type Item implements Object
  @model
  @searchable
  @key(name: "Identifier", fields: ["identifier"], queryField: "itemByIdentifier") {
  id: ID!
  identifier: String!
  item_category: String!
  date: String
  description: String
  parent_collection: [String!]
  title: String!
  visibility: Boolean!
  collection: Collection @connection(name: "CollectionItems")
}

type Query {
  fuzzySearch(
    keyword: String!
    limit: Int
    nextToken: String
  ): FuzzyObjectConnection
  unionSearch(
    query: String!
  ): UnionSearchResult
  searchObjects(
    keyword: String!
    limit: Int
    nextToken: String
  ): SearchableObjectConnection
  andorSearch(
    category: String!
    limit: Int
    nextToken: String
  ): AndOrSearchObjectConnection
}

union UnionSearchResult = Collection | Item

type AndOrSearchObjectConnection {
  items: [Object]
  nextToken: String
  total: Int
}

type FuzzyObjectConnection {
  items: [Collection]
  nextToken: String
  total: Int
}

type SearchableObjectConnection {
  items: [Object]
  nextToken: String
  total: Int
}
